<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClientConnected" xml:space="preserve">
    <value>Client connecté avec le nom d'utilisateur : {0}</value>
  </data>
  <data name="MessageReceived" xml:space="preserve">
    <value>Message reçu de {0} :</value>
  </data>
  <data name="ServerStartFailed" xml:space="preserve">
    <value>Échec du démarrage du serveur sur le port {0} : {1}</value>
  </data>
  <data name="BannerLine1" xml:space="preserve">
    <value>Appuyez sur Ctrl+C pour arrêter le serveur.</value>
  </data>
  <data name="BannerLine2" xml:space="preserve">
    <value>Changez le port TCP utilisé pour l’écoute ou attendez 7 secondes.</value>
  </data>
  <data name="PortPrompt" xml:space="preserve">
    <value>Entrez un numéro de port entre 1000 et 65535 [défaut : 7123] :</value>
  </data>
  <data name="InvalidPortPrompt" xml:space="preserve">
    <value>Port invalide, voulez-vous utiliser le port par défaut (7123) ? (o/n) :</value>
  </data>
  <data name="ShutdownStart" xml:space="preserve">
    <value>Arrêt du serveur...</value>
  </data>
  <data name="ShutdownComplete" xml:space="preserve">
    <value>Arrêt du serveur terminé.</value>
  </data>
  <data name="ServerStartedOnPort" xml:space="preserve">
    <value>Écouteur démarré sur le port {0} — en attente de connexions entrantes...</value>
  </data>
  <data name="StartPacketLoop" xml:space="preserve">
    <value>Boucle de traitement des paquets démarrée pour l’utilisateur '{0}'</value>
  </data>
  <data name="PublicKeyBroadcastFail" xml:space="preserve">
    <value>Échec de la diffusion de la clé publique pour '{0}' : {1}</value>
  </data>
  <data name="PublicKeyBroadcast" xml:space="preserve">
    <value>Clé publique diffusée pour '{0}'</value>
  </data>
  <data name="UnknownOpcode" xml:space="preserve">
    <value>Opcode inconnu '{1}' reçu de '{0}'</value>
  </data>
  <data name="StreamClosed" xml:space="preserve">
    <value>Flux fermé par le pair distant '{0}'</value>
  </data>
  <data name="IOError" xml:space="preserve">
    <value>Erreur E/S pour le client '{0}' : {1}</value>
  </data>
  <data name="PacketLoopError" xml:space="preserve">
    <value>Erreur dans la boucle de paquets pour '{0}'.</value>
  </data>
  <data name="ClientRemoved" xml:space="preserve">
    <value>Client '{0}' supprimé</value>
  </data>
  <data name="RosterSendFailed" xml:space="preserve">
    <value>Échec de l’envoi de la liste de contacts à '{0}' : {1}</value>
  </data>
  <data name="DisconnectNotifyFailed" xml:space="preserve">
    <value>Échec de la notification de déconnexion de '{0}' : {1}</value>
  </data>
  <data name="UserDisconnected" xml:space="preserve">
    <value>Utilisateur '{0}' déconnecté</value>
  </data>
  <data name="PlainMessageBroadcast" xml:space="preserve">
    <value>Message diffusé de '{0}'</value>
  </data>
  <data name="PlainMessageSendFailed" xml:space="preserve">
    <value>Échec de l’envoi du message à '{0}' : {1}</value>
  </data>
  <data name="UnexpectedOpcode" xml:space="preserve">
    <value>Opcode inattendu '{1}' reçu de '{0}'</value>
  </data>
  <data name="HandleNewClientError" xml:space="preserve">
    <value>Erreur lors du traitement du nouveau client '{0}' : {1}</value>
  </data>
  <data name="EncryptedDeliverFailed" xml:space="preserve">
    <value>Échec de la livraison du message chiffré à '{0}' : {1}</value>
  </data>
  <data name="EncryptedMessageRelay" xml:space="preserve">
    <value>Message chiffré relayé de '{0}'</value>
  </data>
  <data name="EncryptedSendError" xml:space="preserve">
    <value>Erreur d’envoi du message chiffré à '{0}' : {1}</value>
  </data>
  <data name="PublicKeyRequestTargetNotFound" xml:space="preserve">
    <value>Requête de clé publique échouée : cible '{0}' introuvable</value>
  </data>
  <data name="PublicKeyRequestRequesterNotConnected" xml:space="preserve">
    <value>Requête de clé publique échouée : demandeur '{0}' non connecté</value>
  </data>
  <data name="PublicKeyRequestSuccess" xml:space="preserve">
    <value>Clé publique de '{0}' envoyée avec succès</value>
  </data>
  <data name="PublicKeyRequestSendError" xml:space="preserve">
    <value>Échec de l’envoi de la clé publique à '{0}' : {1}</value>
  </data>
  <data name="PublicKeyDeliverFail" xml:space="preserve">
    <value>Livraison de la clé publique à '{0}' échouée : {1}</value>
  </data>
  <data name="PublicKeyDelivered" xml:space="preserve">
    <value>Clé publique livrée à '{0}'</value>
  </data>
  <data name="PublicKeyDeliverError" xml:space="preserve">
    <value>Erreur lors de la livraison de la clé publique à '{0}' : {1}</value>
  </data>
  <data name="ShutdownNotifyFail" xml:space="preserve">
    <value>Échec de la notification d’arrêt à '{0}' : {1}</value>
  </data>
  <data name="AcceptLoopError" xml:space="preserve">
    <value>Erreur dans la boucle d’acceptation : {0}</value>
  </data>
  <data name="IncomingConnection" xml:space="preserve">
    <value>Connexion entrante depuis '{0}'</value>
  </data>
  <data name="Exiting" xml:space="preserve">
    <value>Fermeture...</value>
  </data>
  <data name="RosterSendSuccess" xml:space="preserve">
    <value>Envoi de la liste des utilisateurs vers « {0} » réussi</value>
  </data>
  <data name="MessageRelaySuccess" xml:space="preserve">
    <value>Message relayé avec succès à {0}.</value>
  </data>
  <data name="MessageRelayFailed" xml:space="preserve">
    <value>Échec du relais du message à {0} : {1}</value>
  </data>
  <data name="ErrorPublicKeyLengthInvalid" xml:space="preserve">
    <value>Longueur de clé publique invalide reçue du client {0}.</value>
  </data>
  <data name="ErrorInvalidOperationException" xml:space="preserve">
    <value>Opcode inattendu reçu lors du handshake : {0}</value>
  </data>
  <data name="ErrorInvalidDataException" xml:space="preserve">
    <value>Données de handshake invalides : {0}</value>
  </data>
  <data name="ErrorInvalidHandshakeLength" xml:space="preserve">
    <value>Longueur du payload de handshake invalide : {0}</value>
  </data>
  <data name="InvalidFrameLength" xml:space="preserve">
    <value>Longueur de trame invalide reçue du client {0} : {1}</value>
  </data>
  <data name="StreamDisposed" xml:space="preserve">
    <value>Flux réseau disposé pour le client {0}</value>
  </data>
  <data name="ErrorClientCleanup" xml:space="preserve">
    <value>Erreur lors du nettoyage pour le client {0} : {1}</value>
  </data>
  <data name="ClientCleanupComplete" xml:space="preserve">
    <value>Nettoyage du client terminé pour {0}</value>
  </data>
</root>