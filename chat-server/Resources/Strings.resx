<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClientConnected" xml:space="preserve">
    <value>Client connected successfully.</value>
  </data>
  <data name="MessageReceived" xml:space="preserve">
    <value>Message received from {0} :</value>
  </data>
  <data name="ServerStartFailed" xml:space="preserve">
    <value>Failed to start server on port {0} : {1}</value>
  </data>
  <data name="BannerLine1" xml:space="preserve">
    <value>Press Ctrl+C to stop the server.</value>
  </data>
  <data name="BannerLine2" xml:space="preserve">
    <value>Change the TCP port used for listening or wait 7 seconds.</value>
  </data>
  <data name="PortPrompt" xml:space="preserve">
    <value>Enter a port number between 1000 and 65535 [default: 7123]:</value>
  </data>
  <data name="InvalidPortPrompt" xml:space="preserve">
    <value>Invalid port, would you like to use default port (7123)? (y/n):</value>
  </data>
  <data name="ShutdownStart" xml:space="preserve">
    <value>Shutting down server...</value>
  </data>
  <data name="ShutdownComplete" xml:space="preserve">
    <value>Server shutdown complete.</value>
  </data>
  <data name="ServerStartedOnPort" xml:space="preserve">
    <value>Listener started on port {0} — waiting for incoming connections...</value>
  </data>
  <data name="StartingPacketLoop" xml:space="preserve">
    <value>Starting per-client packet read loop.</value>
  </data>
  <data name="PublicKeyBroadcastFail" xml:space="preserve">
    <value>Failed to broadcast public key for '{0}': {1}</value>
  </data>
  <data name="PublicKeyBroadcast" xml:space="preserve">
    <value>Broadcasted public key for '{0}'</value>
  </data>
  <data name="UnknownOpcode" xml:space="preserve">
    <value>Received packet with unknown opcode.</value>
  </data>
  <data name="StreamClosed" xml:space="preserve">
    <value>Remote peer closed the stream.</value>
  </data>
  <data name="IOError" xml:space="preserve">
    <value>I/O error during packet loop.</value>
  </data>
  <data name="ErrorPacketLoop" xml:space="preserve">
    <value>Unhandled error in packet processing loop.</value>
  </data>
  <data name="ClientRemoved" xml:space="preserve">
    <value>Client '{0}' removed</value>
  </data>
  <data name="RosterSendFailed" xml:space="preserve">
    <value>Failed to send roster to '{0}': {1}</value>
  </data>
  <data name="DisconnectNotifyFailed" xml:space="preserve">
    <value>Failed to notify disconnection of '{0}': {1}</value>
  </data>
  <data name="UserDisconnected" xml:space="preserve">
    <value>User '{0}' disconnected</value>
  </data>
  <data name="PlainMessageBroadcast" xml:space="preserve">
    <value>Broadcasted message from '{0}'</value>
  </data>
  <data name="PlainMessageSendFailed" xml:space="preserve">
    <value>Failed to send message to '{0}': {1}</value>
  </data>
  <data name="UnexpectedOpcode" xml:space="preserve">
    <value>Unexpected opcode '{1}' from '{0}'</value>
  </data>
  <data name="EncryptedDeliverFailed" xml:space="preserve">
    <value>Failed to deliver encrypted message to '{0}': {1}</value>
  </data>
  <data name="EncryptedMessageRelay" xml:space="preserve">
    <value>Relayed encrypted message from '{0}'</value>
  </data>
  <data name="EncryptedSendError" xml:space="preserve">
    <value>Error sending encrypted message to '{0}': {1}</value>
  </data>
  <data name="PublicKeyRequestTargetNotFound" xml:space="preserve">
    <value>Public key request failed: target '{0}' not found</value>
  </data>
  <data name="PublicKeyRequestRequesterNotConnected" xml:space="preserve">
    <value>Public key request failed: requester '{0}' not connected</value>
  </data>
  <data name="PublicKeyRequestSuccess" xml:space="preserve">
    <value>Public key of '{0}' sent successfully</value>
  </data>
  <data name="PublicKeyRequestSendError" xml:space="preserve">
    <value>Failed to send public key to '{0}': {1}</value>
  </data>
  <data name="PublicKeyDeliverFail" xml:space="preserve">
    <value>Delivery of public key to '{0}' failed: {1}</value>
  </data>
  <data name="PublicKeyDelivered" xml:space="preserve">
    <value>Public key delivered to '{0}'</value>
  </data>
  <data name="PublicKeyDeliverError" xml:space="preserve">
    <value>Error delivering public key to '{0}': {1}</value>
  </data>
  <data name="ShutdownNotifyFail" xml:space="preserve">
    <value>Failed to notify shutdown to '{0}': {1}</value>
  </data>
  <data name="AcceptLoopError" xml:space="preserve">
    <value>Error in accept loop: {0}</value>
  </data>
  <data name="IncomingConnection" xml:space="preserve">
    <value>Incoming connection from '{0}'</value>
  </data>
  <data name="Exiting" xml:space="preserve">
    <value>Exiting...</value>
  </data>
  <data name="RosterSendSuccess" xml:space="preserve">
    <value>Successfully sent roster to '{0}'</value>
  </data>
  <data name="MessageRelaySuccess" xml:space="preserve">
    <value>Message relayed successfully to {0}.</value>
  </data>
  <data name="MessageRelayFailed" xml:space="preserve">
    <value>Failed to relay message to {0}: {1}</value>
  </data>
  <data name="ErrorPublicKeyLengthInvalid" xml:space="preserve">
    <value>Public key length in handshake is invalid.</value>
  </data>
  <data name="ErrorInvalidOperationException" xml:space="preserve">
    <value>Unexpected opcode during handshake processing.</value>
  </data>
  <data name="ErrorInvalidDataException" xml:space="preserve">
    <value>Invalid data encountered while processing handshake.</value>
  </data>
  <data name="ErrorInvalidHandshakeLength" xml:space="preserve">
    <value>Invalid handshake payload length received during connection initialization.</value>
  </data>
  <data name="InvalidFrameLength" xml:space="preserve">
    <value>Received invalid frame length.</value>
  </data>
  <data name="StreamDisposed" xml:space="preserve">
    <value>Stream disposed while reading.</value>
  </data>
  <data name="ErrorClientCleanup" xml:space="preserve">
    <value>Error occurred during client cleanup.</value>
  </data>
  <data name="ClientCleanupComplete" xml:space="preserve">
    <value>Client cleanup completed.</value>
  </data>
  <data name="ErrorInitializeClient" xml:space="preserve">
    <value>Failed to initialize client: {0}</value>
  </data>
  <data name="HandShakeTimeOutBeforePacketLoop" xml:space="preserve">
    <value>Handshake not completed in time; aborting packet loop.</value>
  </data>
  <data name="SocketAlreadyClosed" xml:space="preserve">
    <value>Socket already closed or not connected.</value>
  </data>
  <data name="SocketCloseFailed" xml:space="preserve">
    <value>Failed to close client socket during cleanup.</value>
  </data>
  <data name="PacketReaderMissing" xml:space="preserve">
    <value>PacketReader instance missing; aborting connection handler.</value>
  </data>
  <data name="SocketNotConnected" xml:space="preserve">
    <value>Client socket is not connected; exiting read loop.</value>
  </data>
  <data name="EmptyFrame" xml:space="preserve">
    <value>Received empty frame; ignoring.</value>
  </data>
  <data name="DisconnectNotifyAlreadySent" xml:space="preserve">
    <value>Disconnect notification already sent for this client.</value>
  </data>
  <data name="HandshakeAckSendFailed" xml:space="preserve">
    <value>Failed to send handshake acknowledgement to client.</value>
  </data>
  <data name="ConnectionClosingDueToError" xml:space="preserve">
    <value>Closing connection due to an error.</value>
  </data>
  <data name="PlainMessageReceived" xml:space="preserve">
    <value>Plain message received from client.</value>
  </data>
  <data name="ForceDisconnectReceived" xml:space="preserve">
    <value>Force-disconnect command received for this client.</value>
  </data>
  <data name="ReadCancelled" xml:space="preserve">
    <value>Read operation cancelled.</value>
  </data>
</root>