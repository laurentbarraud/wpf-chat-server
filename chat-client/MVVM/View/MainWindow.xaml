<Window x:Name="MainWindow1" x:Class="chat_client.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:chat_client" xmlns:viewmodel="clr-namespace:chat_client.MVVM.ViewModel"
        mc:Ignorable="d"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        Title="{Binding WindowTitle}" Height="474" Width="816" WindowStartupLocation="CenterScreen" 
        Loaded="MainWindow_Loaded" ResizeMode="CanMinimize" Icon="/Resources/chat-client-icon.ico" 
        TabIndex="12" StateChanged="MainWindow1_StateChanged" Closing="MainWindow1_Closing" 
        PreviewKeyDown="MainWindow1_PreviewKeyDown">
    <Window.Resources>

        <!-- Slide animation for emoji popup -->
        <Storyboard x:Key="SlideInStoryboard">
            <DoubleAnimation Storyboard.TargetName="popupEmojiPanel"
                         Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)"
                         From="-200" To="0"
                         Duration="0:0:0.3"
                         AccelerationRatio="0.2"
                         DecelerationRatio="0.8" />
        </Storyboard>

        <!-- Slide-out animation for the emoji panel.
         Moves the panel horizontally off-screen to the left with smooth acceleration and deceleration. -->
        <Storyboard x:Key="SlideOutStoryboard">
            <DoubleAnimation Storyboard.TargetName="popupEmojiPanel"
                         Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)"
                         From="0" To="-480"
                         Duration="0:0:0.4"
                         AccelerationRatio="0.6"
                         DecelerationRatio="0.4" />
        </Storyboard>

        <!-- Style for lock coloured icon on encryption enabled -->
        <Storyboard x:Key="LockDropAnim">
            <!-- Rise from closer to the screen (less vertical travel) -->
            <DoubleAnimation Storyboard.TargetName="LockTranslate"
                         Storyboard.TargetProperty="Y"
                         From="200" To="0"
                         Duration="0:0:1.4"
                         AccelerationRatio="0.2"
                         DecelerationRatio="0.8" />

            <!-- Shrink from even larger scale for dramatic impact -->
            <DoubleAnimation Storyboard.TargetName="LockScale"
                         Storyboard.TargetProperty="ScaleX"
                         From="80" To="1"
                         Duration="0:0:1.4"
                         AccelerationRatio="0.2"
                         DecelerationRatio="0.8" />

            <DoubleAnimation Storyboard.TargetName="LockScale"
                         Storyboard.TargetProperty="ScaleY"
                         From="80" To="1"
                         Duration="0:0:1.4"
                         AccelerationRatio="0.2"
                         DecelerationRatio="0.8" />
        </Storyboard>

        <!-- Converts a bool to Visibility: true → Visible, false → Collapsed -->
        <BooleanToVisibilityConverter x:Key="BoolToVis"/>

        <!-- Style for encryption status icon: grey by default, coloured when ready, and zooms on ready -->
        <Style x:Key="EncryptionStatusIconStyle" TargetType="Image">
            <!-- Bind visibility to ViewModel flag -->
            <Setter Property="Visibility"
                Value="{Binding IsEncryptionIconVisible, Converter={StaticResource BoolToVis}}"/>
            <!-- Default: grey syncing icon + "Not encrypted" tooltip -->
            <Setter Property="Source"   Value="/Resources/syncing-keys.png"/>
            <Setter Property="ToolTip"  Value="Not encrypted"/>

            <Style.Triggers>
                <!-- When encryption becomes fully ready -->
                <DataTrigger Binding="{Binding IsEncryptionReady}" Value="True">
                    <!-- Swap to coloured lock icon -->
                    <Setter Property="Source"   Value="/Resources/encrypted.png"/>
                    <!-- Update tooltip -->
                    <Setter Property="ToolTip"  Value="Encrypted"/>
                    <!-- Play zoom animation once -->
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Storyboard="{StaticResource LockDropAnim}"/>
                    </DataTrigger.EnterActions>
                </DataTrigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>

    <Window.DataContext>
        <viewmodel:MainViewModel/>
    </Window.DataContext>

    <Grid x:Name="GrdMain" Background="{DynamicResource BackgroundBrush}">

        <!-- Always start with structural definitions -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <DockPanel x:Name="DpnLeft">
            <Grid DockPanel.Dock="Top" Height="25">

                <TextBox x:Name="TxtUsername"
                         IsEnabled="{Binding AreCredentialsEditable}"
                         Background="Transparent"
                         Foreground="{DynamicResource ForegroundBrush}" 
                         Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}"
                         TextChanged="TxtUsername_TextChanged"
                         FontSize="14"
                         MaxLines="1"
                         MaxLength="50"
                         TabIndex="0"
                         VerticalAlignment="Center"
                         HorizontalAlignment="Left"
                         Width="200"
                         Height="25">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter"
                                    Command="{Binding CmdConnectDisconnect}" />
                    </TextBox.InputBindings>
                </TextBox>

                <!-- Watermark -->
                <Image x:Name="imgUsernameWatermark"
                       Stretch="Uniform"
                       IsHitTestVisible="False"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Left"
                       Width="{Binding ActualWidth, ElementName=TxtUsername}"
                       Height="{Binding ActualHeight, ElementName=TxtUsername}" ScrollViewer.VerticalScrollBarVisibility="Disabled" />

            </Grid>

            <Grid DockPanel.Dock="Top" Height="25">

                <!-- TextBox -->
                <TextBox x:Name="TxtIPAddress"
                         IsEnabled="{Binding AreCredentialsEditable}"
                         Background="Transparent"
                         Foreground="{DynamicResource ForegroundBrush}" 
                         Text="{Binding IPAddressOfServer, UpdateSourceTrigger=PropertyChanged}"
                         TextChanged="TxtIPAddress_TextChanged"
                         FontSize="14"
                         MaxLines="1"
                         MaxLength="15"
                         TabIndex="1"
                         VerticalAlignment="Center"
                         HorizontalAlignment="Left"
                         Width="200"
                         Height="25">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter"
                    Command="{Binding CmdConnectDisconnect}" />
                    </TextBox.InputBindings>
                </TextBox>

                <!-- Watermark -->
                <Image x:Name="imgIPAddressWatermark"
                       Stretch="Uniform"
                       IsHitTestVisible="False"
                       VerticalAlignment="Center"
                       HorizontalAlignment="Left"
                       Width="{Binding ActualWidth, ElementName=TxtIPAddress}"
                       Height="{Binding ActualHeight, ElementName=TxtIPAddress}" ScrollViewer.VerticalScrollBarVisibility="Disabled" />
            </Grid>

            <Button x:Name="CmdConnectDisconnect" Height="25"
                    Content="{Binding ConnectButtonText}"
                    Command="{Binding ConnectDisconnectCommand}" 
                    Background="{DynamicResource PrimaryBrush}"
                    Foreground="{DynamicResource ForegroundBrush}"
                    DockPanel.Dock="Top"
                    TabIndex="2" IsEnabled="False"/>
            <StackPanel DockPanel.Dock="Top"
                Orientation="Vertical"
                Margin="0,0,0,0" Height="356">

                <ListView x:Name="lstUsersConnected"
                    ItemsSource="{Binding Users}"
                    TabIndex="7"
                    Height="324"
                    Margin="0,0,0,0"
                    Background="{DynamicResource BackgroundBrush}"
                    Foreground="{DynamicResource ForegroundBrush}"
                    BorderBrush="{DynamicResource PrimaryBrush}"
                    BorderThickness="1"
                    SelectionMode="Single" SelectedIndex="3">

                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="Padding" Value="4" />
                            <Setter Property="Margin" Value="1" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ListView.ItemContainerStyle>

                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Username}" />
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>

                <StackPanel x:Name="SpnToolbar"
                            Orientation="Horizontal"
                            Height="32"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="0,0,0,0">

                    <!-- Toggle button to switch theme -->
                    <ToggleButton x:Name="ThemeToggle"
                                  Width="60"
                                  Height="32"
                                  VerticalAlignment="Center"
                                  Margin="0,0,10,0"
                                  Command="{Binding ThemeToggleCommand}"
                                  CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"
                                  IsChecked="{Binding IsDarkTheme, Mode=TwoWay}" TabIndex="6">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid>
                                    <!-- Rounded background -->
                                    <Border x:Name="SwitchBackground"
                                        CornerRadius="16"
                                        Background="{DynamicResource BackgroundBrush}"
                                        BorderBrush="{DynamicResource PrimaryBrush}"
                                        BorderThickness="1" />

                                    <!-- Thumb with icon -->
                                    <Grid x:Name="ThumbContainer"
                                      Width="28" Height="28"
                                      VerticalAlignment="Center"
                                      Margin="2,2,30,2">
                                        <!-- Default: left -->
                                        <Ellipse Fill="{DynamicResource PrimaryBrush}" />

                                        <Image x:Name="SwitchIcon"
                                           Source="/Resources/sun.png"
                                           Width="18" Height="18"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center" />
                                    </Grid>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <!-- Checked: move thumb to right + change icon -->
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter TargetName="SwitchIcon" Property="Source" Value="/Resources/moon.png" />
                                        <Setter TargetName="ThumbContainer" Property="Margin" Value="30,2,2,2" />
                                    </Trigger>

                                    <!-- Unchecked: move thumb to left + change icon -->
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter TargetName="SwitchIcon" Property="Source" Value="/Resources/sun.png" />
                                        <Setter TargetName="ThumbContainer" Property="Margin" Value="2,2,30,2" />
                                    </Trigger>

                                    <!-- Hover effect -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="SwitchBackground" Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                    </Trigger>

                                    <!-- Disabled state -->
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter TargetName="SwitchBackground" Property="Opacity" Value="0.4" />
                                        <Setter TargetName="ThumbContainer" Property="Opacity" Value="0.4" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>

                    <!-- Settings Button -->
                    <Button x:Name="CmdSettings"
                              Width="32"
                              Height="32"
                              Background="Transparent"
                              BorderThickness="0"
                              VerticalAlignment="Center"
                              TabIndex="7" Click="CmdSettings_Click">
                        <Image x:Name="imgSettings" 
                               Source="/Resources/settings.png"
                               Stretch="Uniform"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center" />
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="Transparent"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Opacity" Value="0.8"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                </StackPanel>
            </StackPanel>
        </DockPanel>

        <StackPanel x:Name="SpnCenter" Grid.Column="1">

            <ListView x:Name="lstMessagesReceived"
                        Height="382"
                        ItemsSource="{Binding Messages}"
                        Background="{DynamicResource BackgroundBrush}"
                        Foreground="{DynamicResource ForegroundBrush}"
                        BorderThickness="0" TabIndex="6">

                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                        <Setter Property="Padding" Value="4" />
                        <Setter Property="Margin" Value="1" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="VerticalContentAlignment" Value="Center" />
                        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource BackgroundBrush}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>

                <ListView.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding}"
                                   TextWrapping="Wrap"
                                   FontFamily="Segoe UI Emoji" />
                    </DataTemplate>
                </ListView.ItemTemplate>

            </ListView>

            <StackPanel x:Name="SpnEmojiPanel" 
                        Orientation="Horizontal" 
                        Height="20" 
                        Visibility="{Binding AreChatControlsVisible, Converter={StaticResource BoolToVis}}">
                <Button x:Name="CmdEmojiPanel"
                        Height="{Binding ActualHeight, ElementName=SpnEmojiPanel}"
                        Width="{Binding ActualHeight, ElementName=SpnEmojiPanel}"
                        Background="Transparent"
                        BorderThickness="0"
                        VerticalAlignment="Center"
                        ToolTip="Emoji bar"
                        TabIndex="5"
                        Click="CmdEmojiPanel_Click"
                        Margin="4,0,4,0">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Opacity" Value="0.8"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Image x:Name="ImgEmojiPanel" 
                           Source="/Resources/right-arrow.png"
                           Stretch="Uniform"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Width="14" />
                </Button>

                <Grid>
                    <!-- Lock icon with pure MVVM binding and zoom animation -->
                    <Image x:Name="imgEncryptionStatus"
                           Width="15"
                           Height="15"
                           DockPanel.Dock="Left"
                           Margin="0"
                           VerticalAlignment="Center"
                           Panel.ZIndex="999"
                           Style="{StaticResource EncryptionStatusIconStyle}">
                        <!-- RenderTransform required by LockDropAnim storyboard -->
                        <Image.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform x:Name="LockScale"    ScaleX="1" ScaleY="1"/>
                                <TranslateTransform x:Name="LockTranslate" X="0" Y="0"/>
                            </TransformGroup>
                        </Image.RenderTransform>
                    </Image>

                    <!-- Diagonal glow sweep overlay -->
                    <Rectangle x:Name="lightSweep"
                               Width="40" Height="15"
                               Opacity="0"
                               IsHitTestVisible="False">
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                                <GradientStop Color="#00FFFFFF" Offset="0.0" />
                                <GradientStop Color="#80FFFFFF" Offset="0.5" />
                                <GradientStop Color="#00FFFFFF" Offset="1.0" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                        <Rectangle.RenderTransform>
                            <TranslateTransform X="-40" Y="0" />
                        </Rectangle.RenderTransform>
                    </Rectangle>
                </Grid>

                <!-- This Popup is linked to the CmdEmojiPanel button and opens right with a slide animation. -->
                <!-- The emojis are bound to an EmojiList list defined in code-behind. -->
                <Popup x:Name="popupEmojiPanel"
                       Placement="Custom"
                       PlacementTarget="{Binding ElementName=TxtMessageToSend}"
                       StaysOpen="False"
                       AllowsTransparency="True"
                       PopupAnimation="Slide"
                       Closed="PopupEmojiPanel_Closed">

                    <Popup.RenderTransform>
                        <TranslateTransform X="0" />
                    </Popup.RenderTransform>

                    <Border Background="{DynamicResource BackgroundBrush}"
                            BorderBrush="{DynamicResource PrimaryBrush}"
                            BorderThickness="1"
                            Padding="4"
                            CornerRadius="6"
                            Height="{Binding EmojiPanelHeight, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                            Width="460">

                        <!-- Adjusted layout for 13 emojis + arrows with vertical centering -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <!-- Left arrow -->
                                <ColumnDefinition Width="*" />
                                <!-- Emoji list -->
                                <ColumnDefinition Width="Auto" />
                                <!-- Right arrow -->
                            </Grid.ColumnDefinitions>

                            <!-- Left scroll button -->
                            <Button x:Name="CmdScrollLeft"
                                    Grid.Column="0"
                                    Width="20"
                                    Height="20"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    MouseEnter="CmdScrollLeft_MouseEnter"
                                    MouseLeave="CmdScrollLeft_MouseLeave"
                                    ToolTip="Scroll left">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                                <Image Source="/Resources/left-arrow.png" Stretch="Uniform" />
                            </Button>
                            <!-- Scrollable emoji panel -->
                            <ScrollViewer x:Name="emojiScrollViewer"
                                          Grid.Column="1"
                                          VerticalAlignment="Center"
                                          MinHeight="48"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Disabled"
                                          CanContentScroll="True">
                                <ItemsControl x:Name="emojiItems"
                                                ItemsSource="{Binding EmojiList}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Button Width="20"
                                                    Height="{Binding ActualHeight, ElementName=SpnEmojiPanel}"
                                                    Margin="2"
                                                    Padding="0"
                                                    Background="{DynamicResource PrimaryBrush}"
                                                    Foreground="{DynamicResource ForegroundBrush}"
                                                    BorderThickness="0"
                                                    VerticalAlignment="Center"
                                                    Click="EmojiButton_Click">
                                                <Button.Template>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border Background="{TemplateBinding Background}"
                                                                CornerRadius="4"
                                                                VerticalAlignment="Stretch"
                                                                HorizontalAlignment="Stretch">
                                                            <ContentPresenter HorizontalAlignment="Center"
                                                                VerticalAlignment="Center" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Button.Template>
                                                <TextBlock Text="{Binding}" FontSize="14"
                                                           HorizontalAlignment="Center"
                                                           VerticalAlignment="Center" />
                                            </Button>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ScrollViewer>

                            <!-- Right scroll button -->
                            <Button x:Name="CmdScrollRight"
                                    Grid.Column="2"
                                    Width="20"
                                    Height="{Binding ActualHeight, ElementName=SpnEmojiPanel}"
                                    VerticalAlignment="Center"
                                    Background="Transparent"
                                    BorderThickness="0"
                                    MouseEnter="CmdScrollRight_MouseEnter"
                                    MouseLeave="CmdScrollRight_MouseLeave"
                                    ToolTip="Scroll right">
                                <Button.Style>
                                    <Style TargetType="{x:Type Button}">
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                                <Image Source="/Resources/right-arrow.png" Stretch="Uniform" />
                            </Button>
                        </Grid>
                    </Border>
                </Popup>

            </StackPanel>

            <StackPanel x:Name="SpnDown" Orientation="Horizontal" 
                        Visibility="{Binding AreChatControlsVisible, Converter={StaticResource BoolToVis}}">
            <TextBox x:Name="TxtMessageToSend" Height="32"
                         Width="545"
                         Background="{DynamicResource BackgroundBrush}"
                         Foreground="{DynamicResource ForegroundBrush}"
                         VerticalContentAlignment="Center"
                         Text="{Binding Message, UpdateSourceTrigger=PropertyChanged}" TextChanged="TxtMessageToSend_TextChanged" MaxLines="5" TextWrapping="Wrap" MaxLength="500" PreviewKeyDown="TxtMessageToSend_PreviewKeyDown" TabIndex="3" FontFamily="Segoe UI Emoji"/>
                <Button x:Name="CmdSend"
                        Height="32"
                        Width="48"
                        Click="CmdSend_Click"
                        IsEnabled="False"
                        Background="{DynamicResource PrimaryBrush}"
                        Foreground="{DynamicResource ForegroundBrush}" TabIndex="4">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                                    <Setter Property="Opacity" Value="0.6" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Image Source="/Resources/send.png" Stretch="Uniform"/>
                </Button>
            </StackPanel>
        </StackPanel>
      
    </Grid>
</Window>
